classe comando_adm
# Funções necessárias para os comandos de administração
#
const posic = 8 # Posição mínima para usar o comando; não usado em classes adm_
const objcmd = arg1 == $perm_admin ? este # Objeto que processa o comando
const iniclasse = !$[arg0] && criar(arg0)
const admcod = txttroca(txttroca(arg0, "\"", "\\\""), "\n", "\\n")
const admdec = txttroca(txtvis(arg0), "\\\"", "\"")

func passosair # Sai do passo atual, volta para o menu
  $[arg0.passo = arg0.var.opcpasso].passo(arg0, "\b")
  ret 1

func admlog # Mensagem para todos com a opção "config +admlog"
# arg0.nome = nome do personagem
# arg1 = mensagem
  $misclog.admlog(arg0.nome + ": " + arg1)
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.21 && item.obj.msg("\b\d1(adm) " + arg0.nome + " " + arg1 + "\b")
  efim

func cmdlog # Mensagem para todos com a opção "config +cmdlog"
# arg0.nome = nome do personagem
# arg1 = nome do comando
# arg2 = comando
  $misclog.cmdlog(arg1 + " " + arg0.nome + ": " + arg2)
  refvar t = "\b(cmd) " + arg0.nome + " " + arg1 + ": " + arg2 + "\b"
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.22 && item.obj.msg(t)
  efim

func existe_p # Checa se personagem existe no comando Lperso
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome do personagem (nome da classe em o "p_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_lperso
  casose "1"
    ret p.existe("p_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("p_" + arg1)
  casofim
  ret 0

func existe_i # Checa se item existe no comando Litem
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome do item (nome da classe em o "i_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_litem
  casose "1"
    ret p.existe("i_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("i_" + arg1)
  casofim
  ret 0

func existe_s # Checa se sala existe no comando Lsala
# arg0 = personagem do jogador ou objeto jogsock
# arg1 = nome da sala (nome da classe em o "s_" no começo)
# Retorna verdadeiro se existe
  prog p
  casovar $perm_[arg0.jogperm].c_lsala
  casose "1"
    ret p.existe("s_" + arg1) && arg0.jogarea + txtfim(arg1, 3) == arg1
  casose "2"
    ret p.existe("s_" + arg1)
  casofim
  ret 0

func p_vartexto # Mesmo prog.vartexto, porém checa redirecionamento como "const a = b:c"
  prog p
  ret p.vartexto(arg0, arg1), 1
  p.inilinha(arg0, arg1)
  ret txt1(p.texto) != "const", 0
  refvar lin = txtsub(p.texto, 3)
  refvar ind1 = txtproc(lin, ":") # Aonde termina o nome da classe
  refvar ind2 = txtproc(lin, "#") + 1 ?? 10000 # Aonde termina o nome da função
  refvar funcao = txtremove(txt(lin, ind1 + 1, ind2 - ind1 - 2), "d")
  ret p.vartexto(txt(lin, 0, ind1), funcao)

func p_varnum # Mesmo prog.varnum, porém checa redirecionamento como "const a = b:c"
  prog p
  ret p.varnum(arg0, arg1), 1
  p.inilinha(arg0, arg1)
  ret txt1(p.texto) != "const", 0
  refvar lin = txtsub(p.texto, 3)
  refvar ind1 = txtproc(lin, ":") # Aonde termina o nome da classe
  refvar ind2 = txtproc(lin, "#") + 1 ?? 10000 # Aonde termina o nome da função
  refvar funcao = txtremove(txt(lin, ind1 + 1, ind2 - ind1 - 2), "d")
  ret p.varnum(txt(lin, 0, ind1), funcao)


classe admordena
# Organiza as classes de um arquivo em ordem alfabética
# Modo de usar:
# criar("admordena", <nome do arquivo sem o .int no final>)
intexec repete
txt100 nomeclasse

func ini
  nomeclasse = arg0, repete = 1

func repete_exec
  apagar(este)
  prog p
  textotxt t
  epara p.iniarq(nomeclasse), p.lin, p.depois
    t.addfim(p.texto)
  efim
  t.ordena
  p.clini(nomeclasse, t.ini.texto)
  enquanto t.linhas > 1
    p.cldepois(t.remove, t.ini.texto)
  efim
  config:salvar
