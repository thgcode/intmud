classe cmd_quem
herda comando_comum
const txtajuda = "\b\c3Quem\b\n\
Sintaxe: QUEM\n\
Mostra quem está conectado no MUD e jogando."
const posic = 0
const nivel = "N" # Texto na frente do nível

func escr
  textotxt t0
  txt100 t1
  int16 total.3
# Lista de personagens dos jogadores
  refvar ver = arg2.c_config & 4
  refvar monit = arg2.c_monit
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
    continuar item.obj.jogconfig.17 && !ver
    refvar obj = item.obj
    refvar v1 = $t_[obj.tipo1].nomequem
    refvar v2 = $t_[obj.tipo2].nomequem
    refvar v3 = $t_[obj.tipo3].nomequem
    total.[obj.jogconfig.20]++
    t1 = txt(obj.pnivel) + (obj.prenascer ? " R" + obj.prenascer)
    t1 += txtesp(7 - inttotal(t1)) + " " + obj.nome
    t1 = (obj.jogconfig.20 ? "A" : "B") + txt(999000 - obj.pnivel) + " " + nivel + t1
    obj.var.z_titulo && (t1 += ", " + obj.var.z_titulo)
    t1 += "  "
    obj.p_tempofim && (t1 += " [Desconectado]")
    se ver
      refvar txtperm = txtremove(obj.jogperm + " " + obj.jogarea, "ED")
      txtperm != "jog" && (t1 += " [" + txtperm + "]")
      obj.jogconfig.17 && (t1 += " [InvQuem]")
      !(obj.sock || obj.p_tempofim) && (t1 += " [PNJ]")
    fimse
    monit && obj.sock.imonit && (t1 += " [Monit " + obj.sock.imonit.objlista.nome + "]")
    t1 += (v1 ? " " + v1 : "") + (v2 ? " " + v2) + (v3 ? " " + v3)
    se !ver
      refvar nome = $perm_[obj.jogperm].nomequem
      nome && (t1 += " " + nome)
    fimse
    t0.addfim(txtremove(t1, "d"))
  efim
# Lista de jogadores sem personagem de jogador
  se ver
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      refvar obj = item.obj
      continuar obj.perso.jog # Continuar se personagem é jogador
      total.2++
      se obj.perso
        t1 = txt(obj.perso.pnivel)
        t1 += txtesp(7 - inttotal(t1)) + " " + obj.nome + ", " + obj.perso.nome
        t1 = "C" + txt(999000 - obj.perso.pnivel) + " " + nivel + t1
      senao
        t1 = "C999001 " + nivel + "?       " + obj.nome
      fimse
      t0.addfim(t1)
    efim
  fimse
# Mostra a quantidade de personagens online
  total.0 && t0.addfim("B 00000 \b\c6Jogadores online: " + total.0 + "\b")
  total.1 && t0.addfim("A 00000 \b\c6Imortais online: " + total.1 + "\b")
  total.2 && t0.addfim("C 00000 \b\c6Outros: " + total.2 + "\b")
# Ordena e mostra para o jogador
  t0.ordena
  textopos pos
  txt1 ch
  epara pos = t0.ini, pos, pos.depois
    pos.mudar("", 0, 8)
  efim
  arg0.msg2(t0.remove(1000))


classe cmd_hab
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Hab\b\n\
Sintaxe: HAB  [nome da habilidade]\n\
Sem argumentos mostra as habilidades do seu personagem.\n\
Seguido de um nome, mostra informações sobre a habilidade.\n\
Geralmente pode-se usar uma habilidade teclando-se o nome dela."

func escr
  ref r
  r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("cmd_" + txt1(arg1)), p.lin, p.depois
      continuar !r.var.[$[p.texto].nomevar]
      refvar t1 = $[p.texto].habajuda(r)
      ret t1, arg0.msg2(t1)
    efim
    ret arg0.msg("Nenhuma informação sobre a habilidade: " + arg1)
  fimse
  txt100 n
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("h_"), t1, t1 = r.var.depois(t1, "h_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhuma habilidade.")
  h.addini("\b\c6Habilidades" + n + ":\b")
  arg0.msg2(h.remove(1000))


classe cmd_magia
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Magia\b\n\
Sintaxe: MAGIA  [nome da magia]\n\
Sem argumentos mostra as magias do seu personagem.\n\
Seguido de um nome, mostra informações sobre a magia.\n\
Geralmente pode-se usar uma magia teclando-se lançar e o nome dela."

func escr
  ref r
  r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("magia_" + txt1(arg1)), p.lin, p.depois
      continuar !r.var.[$[p.texto].nomevar]
      refvar t1 = $[p.texto].habajuda(r)
      ret t1, arg0.msg2(t1)
    efim
    ret arg0.msg("Nenhuma informação sobre a magia: " + arg1)
  fimse
  txt100 n
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("m_"), t1, t1 = r.var.depois(t1, "m_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhuma magia.")
  h.addini("\b\c6Magias" + n + ":\b")
  arg0.msg2(h.remove(1000))


classe cmd_idioma
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Idioma\b\n\
Sintaxe: IDIOMA\n\
Mostra os idiomas que o seu personagem conhece."

func escr
  txt100 n
  ref r
  r = arg0.persoesc
  r != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("i_"), t1, t1 = r.var.depois(t1, "i_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhum idioma.")
  h.addini("\b\c6Idiomas" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_outros
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Outros\b\n\
Sintaxe: OUTROS\n\
Mostra itens e habilidades extras. Geralmente são permanentes (não pode-se\n\
pegar, soltar, dar e vestir)."

func escr
  txt100 n
  refvar r = arg0.persoesc
  r != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("o_"), t1, t1 = r.var.depois(t1, "o_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    se txt(int(r.var.[t1])) == r.var.[t1]
      t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    senao
      t2 += " / " + r.var.[t1]
    fimse
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhum item.")
  h.addini("\b\c6Outros" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_inv
herda comando_comum
const posic = 5
const txtajuda = config:animal1 ? txttroca(ta2, "$", config:animal1) : ta1
const ta1 = "\b\c3Inv\b\n\
Sintaxe: INV\n\
Mostra os itens que o seu personagem está carregando."
const ta2 = "\b\c3Inv\b\n\
Sintaxe: INV\n\
         INV <número>\n\
Mostra os itens que o seu personagem está carregando.\n\
Seguido de um número de 0 a $ mostra os itens do animal correspondente."

func escr
  textotxt t
  listaitem item
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, nulo
  epara item = r.dentro1.fim, item, item.antes
    refvar i = item.obj
    continuar !i.visivel(arg0)
    refvar nn = txtsublin(i.atribs.ini.textolin(2), 1)
    t.addfim(txt(i.objtot) + i.atribs.ini.texto + txtcopiamai(i.descnome, "A") + nn)
  efim
  t.juntalin("(", "x)")
  refvar nome = r == arg0 ? "Você" : txtcopiamai(r.nome, "A")
  se t
    arg0.msg2("\b\c6" + nome + " carrega:\b\n" + txttroca(t.remove(1000), "\d+", "\n"))
  senao
    arg0.msg("\b" + nome + " não está carregando nada.")
  fimse


classe cmd_equip
herda comando_comum
const posic = 5
const txtajuda = config:animal1 ? txttroca(ta2, "$", config:animal1) : ta1
const ta1 = "\b\c3Equip\b\n\
Sintaxe: EQUIP\n\
         EQUIP TUDO\n\
Mostra os itens que o seu personagem está vestindo ou usando.\n\
Digitando EQUIP TUDO, são mostradas também as posições aonde o seu\n\
personagem pode vestir algo."
const ta2 = "\b\c3Equip\b\n\
Sintaxe: EQUIP\n\
         EQUIP TUDO\n\
         EQUIP <número>\n\
Mostra os itens que o seu personagem está vestindo ou usando.\n\
Digitando EQUIP TUDO, são mostradas também as posições aonde o seu\n\
personagem pode vestir algo.\n\
Seguido de um número de 0 a $ mostra os itens do animal correspondente."

func escr
  textotxt t
  listaitem item
  ref pos.55
  txt50 nomepos
# Obtém o personagem
  refvar r = arg1 == "tudo" ? arg0 : misc:persoinfo(arg0, arg1)
  ret !r, nulo
# Preenche pos
  epara item = r.dentro2.fim, item, item.antes
    continuar !item.obj.vestpos || !item.obj.visivel(arg0)
    pos.[item.obj.vestpos] = item.obj
  efim
# Mostra as posições
  txt512 lin
  refvar lugar = arg1 == "tudo" ? r.equippos : "0"
  epara lin = config:equip_ordem, lin, lin = txt2(lin)
    refvar obj = pos.[1 + txt1(lin)]
    se obj.vestpos && obj.visivel(arg0)
      nomepos = "\c2(" + misc:equip(obj.vestpos) + ")\b "
      nomepos += txtesp(23 - inttotal(nomepos)) + obj.atribs.ini.texto(1)
      t.addfim(nomepos + txtcopiamai(obj.descnome, "A"))
    senao (lugar & intbith(1 + txt1(lin))) != "0"
      nomepos = "\c2(" + misc:equip(1 + txt1(lin)) + ")\b "
      se nomepos != "\c2(desconhecido)\b "
        t.addfim(nomepos + txtesp(23 - inttotal(nomepos)) + "nada")
      fimse
    fimse
  efim
# Envia mensagem
  refvar nome = r == arg0 ? "Você" : txtcopiamai(r.nome, "A")
  se t.linhas
    refvar eq = r.msexo ? " está equipado" : " está equipada"
    arg0.msg2("\b\c6" + nome + eq + " com:\b\n" + t.remove(1000))
  senao
    arg0.msg("\b" + nome + " não está vestindo/usando nada.")
  fimse


classe cmd_efeito
herda comando_comum, opc_atribcomum
const posic = 0
const txtajuda = "\b\c3Efeito\b\n\
Sintaxe: EFEITO  [nome do efeito]\n\
Sem argumentos mostra os efeitos que estão afetando o seu personagem.\n\
Seguido de um nome, mostra informações sobre o efeito."

func escr
  listaitem i
  ref r = arg0.persoesc
  se arg1
    ref obj
    nomeobj n
    n.ini(arg1, 1)
    epara i = r.dentro2.ini, i, i.depois
      continuar !i.obj.e_nome || !n.nome(i.obj.e_nome)
      textotxt t
      txt100 lin = "Efeito " + i.obj.e_nome + ", duração "
      lin += i.obj.t_duracao ? txt(int(i.obj.t_duracao / 10)) : " indeterminada"
      t.addfim(lin)
      atrib_ler(i.obj, "recalc2_auto")
      atrib_txt(t)
      i.obj.e_desc && t.addfim(i.obj.e_desc)
      ret arg0.msg2(t.remove(1000))
    efim
    ret arg0.msg("Nenhuma informação sobre o efeito: " + arg1)
  fimse
  txt100 n
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  epara i = r.dentro2.ini, i, i.depois
    continuar !i.obj.e_nome
    h.addfim("1 " + i.obj.e_nome + (i.obj.t_duracao ? " (" + int(i.obj.t_duracao / 10) + \
")"))
  efim
  refvar nome = r == arg0 ? "você" : r.nome
  ret !h.linhas, arg0.msg("\bNenhum efeito afetando " + nome + ".")
  h.ordenalin("", "x")
  arg0.msg2("\b\c6Efeitos afetando " + nome + ":\b\n" + h.remove(1000))


classe cmd_vida
herda comando_comum
const posic = 0
const txtajuda = config:animal1 ? txttroca(ta2, "$", config:animal1) : ta1
const ta1 = "\b\c3Vida\b\n\
Sintaxe: VIDA\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem."
const ta2 = "\b\c3Vida\b\n\
Sintaxe: VIDA\n\
         VIDA <número>\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem.\n\
Seguido de um número de 0 a $ mostra as informações do animal correspondente."

func escr
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, nulo
  se r == arg0
    arg0.msg(vidalin(arg0))
  senao
    arg0.msg(txtcopiamai(r.nome, "A") + ": " + vidalin(r))
  fimse

func vidalin
  txt100 lin
  lin = "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual
  refvar nmax = arg0.pnivelmax
  (nmax <= 0 || arg0.pnivel < nmax) && (lin += "/" + arg0.expmax)
  ret lin


classe cmd_relatar
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Relatar\b\n\
Sintaxe: RELATAR\n\
Mostra as suas estatísticas (vida, mana, movimento e experiência) para\n\
os outros personagens e jogadores que estiverem na mesma sala."

func escr
  txt200 lin
  lin = txt(arg0.nome) + " relata:\n"
  lin += "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual
  arg0.dono.msg(lin)


classe cmd_moedas
herda comando_comum
const txtajuda = "\b\c3Moedas\b\n\
Sintaxe: MOEDAS\n\
Mostra quantas moedas você está carregando."
const posic = 0

func escr
  txt100 lin
  txt100 lin2
  se !arg0.var.z_moedas_
    lin = "Nenhuma moeda"
  senao arg0.var.z_moedas_ == 1
    lin = "Uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin = "Duas moedas"
  senao
    lin = txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  se arg0.persoesc == arg0 || !arg0.persoesc.var.z_moedas_
  senao arg0.persoesc.var.z_moedas_ == 1
    lin2 = " uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin2 = " duas moeda"
  senao
    lin2 = " " + txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  lin2 && (lin += ", " + txtcopiamai(arg0.persoesc.nome, "A") + lin2)
  arg0.msg(lin + ".")


classe cmd_hora
herda comando_comum
const txtajuda = "\b\c3Hora\b\n\
Sintaxe: HORA\n\
Mostra a hora atual, no calendário do MUD e no servidor."
const posic = 0

func escr
  txt100 t1
  datahora d
  d.agora
  t1 = "  (" + semanamud(misc:dia) + ")"
  arg0.msg("Hora atual MUD:      " + misc:hora + ":" + misc:min + t1)
  t1 = "Hora atual servidor: " + d.hora + ":" + d.min
  arg0.msg(t1 + "  " + d.dia + "/" + d.mes + "/" + d.ano)
  t1 = "Tempo total de jogo: "
  arg0.tempojogo2 == 1 && (t1 += "1 dia ")
  arg0.tempojogo2 > 1 && (t1 += txt(arg0.tempojogo2) + " dias ")
  t1 += intdiv((864000 - arg0.tempojogo1) / 36000)
  t1 += ":"
  t1 += intdiv((864000 - arg0.tempojogo1) / 600) % 60
  arg0.msg(t1 + " horas")
  ret !arg0.sock, nulo
  int32 x
  x = arg0.sock.tempojogo
  se x >= 24 * 36000
    t1 = "Mais de 24 horas"
  senao
    t1 = intdiv(x / 36000)
    t1 += ":" + intdiv(x / 600) % 60 + " horas"
  fimse
  arg0.msg("Tempo dessa sessão:  " + t1)

func semanamud
  casovar arg0
  casose "0"
    ret "Domingo"
  casose "1"
    ret "Segunda-feira"
  casose "2"
    ret "Terça-feira"
  casose "3"
    ret "Quarta-feira"
  casose "4"
    ret "Quinta-feira"
  casose "5"
    ret "Sexta-feira"
  casose "6"
    ret "Sábado"
  casofim


classe cmd_onde
herda comando_comum
const txtajuda = "\b\c3Onde\b\n\
Sintaxe: ONDE\n\
Mostra a área em que você está e os jogadores que estiverem por perto."
const posic = 0

func escr
  textotxt t0
  txt100 area
  ref r
  epara r = arg0.dono, r.dono, r = r.dono
  efim
  area = r.s_area
# Checa se pode ver a sala
  se !r.visivel(arg0)
    se 1 & arg0.bitver
      arg0.msg("Está escuro...")
    senao
      arg0.msg("Você está ceg" + (arg0.msexo ? "o" : "a") + ".")
    fimse
    ret
  fimse
# Dados da área
  t0.addfim("\b\c6Área " + $a_[area].a_nome + ":\b")
# Lista de personagens dos jogadores
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
# continuar item.obj.jogconfig.18 && !arg0.jogconfig.18
    continuar !item.obj.visivel(arg0)
    epara r = item.obj.dono, r.dono, r = r.dono
    efim
    continuar area != r.s_area
    refvar titulo = item.obj.dono.var.z_titulo
    t0.addfim(item.obj.nome + "    " + (titulo ? titulo : item.obj.dono.s_titulo(arg0)))
  efim
  t0.txtmostra
  arg0.msg2(t0.remove(1000))


classe cmd_saidas
herda comando_comum
const posic = 5
const txtajuda = "\b\c3Saídas\b\n\
Sintaxe: SAÍDAS\n\
Mostra as saídas óbvias do lugar onde você está."

func escr
  se !arg0.dono.visivel(arg0)
    arg0.msg("Está escuro...")
    ret
  fimse
  textotxt t
  txt80 dir
  ref dono = arg0.dono
  epara dir = misc:listadir, dir, dir = txt2(dir)
    refvar nome = txt1(dir)
    refvar sala = dono.dirsala(nome, arg0)
    continuar !sala || dono.inv_[txt1(dir)](arg0)
    se int(dono.porta_[nome]) >= 2
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + "Está fechado")
    senao sala.visivel(arg0)
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + sala.s_titulo(arg0))
    senao
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + "Está escuro")
    fimse
  efim
  se t.linhas
    arg0.msg2("\b\c6Saídas óbvias:\b\n" + t.remove(1000))
  senao
    arg0.msg("Não há nenhuma saída óbvia.")
  fimse


classe cmd_estat
herda comando_comum
const posic = 5
const txtajuda = config:animal1 ? txttroca(ta2, "$", config:animal1) : ta1
const ta1 = "\b\c3Estat\b\n\
Sintaxe: ESTAT\n\
Mostra as estatísticas e diversas informações sobre o seu personagem."
const ta2 = "\b\c3Estat\b\n\
Sintaxe: ESTAT\n\
         ESTAT <número>\n\
Mostra as estatísticas e diversas informações sobre o seu personagem ou\n\
o animal você escolheu.\n\
Seguido de um número de 0 a $ mostra as estatísticas do animal\n\
correspondente."

func escr
  textotxt t
  textotxt h
  txt100 t1
# Obtém o personagem
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, nulo
  t.addfim("\b\c6Estatísticas de \"" + r.nome + "\"\b")
# Vida, mana e vigor
  t1 = "Vida " + r.pvida + "/" + r.pvidamax
  t1 += "  Mana " + r.pmana + "/" + r.pmanamax
  t1 += "  Vigor " + r.pmove + "/" + r.pmovemax
  t.addfim(t1)
# Fome, sede e embriaguez, somente para administradores
  se arg2 == $perm_admin && r.jog
    t1 = "Sede " + r.p_sede + " fome " + r.p_fome + " embriaguez " + r.p_bebida
    t1 += " digestão " + r.p_diges + "; máximo é " + $miscfome.cheio
    t.addfim(t1)
  fimse
# Tipo
  r.tipo1 && h.addfim(txtcopiamai(txte(r.tipo1), "A"))
  r.tipo2 && h.addfim(txtcopiamai(txte(r.tipo2), "A"))
  r.tipo3 && h.addfim(txtcopiamai(txte(r.tipo3), "A"))
  h.linhas && t.addfim("Tipo/raça/classe: " + txttroca(h.remove(10), "\n", ", "))
  t.addfim("Sexo:             " + (r.psexo ? "Masculino" : "Feminino"))
# Quem pegou
  se r != r.contr && r.var.z_dono
    t1 = "Pego por:         " + txte(r.var.z_dono)
    t.addfim(t1 + " (no nível " + int(r.var.z_pnivel) + ")")
  fimse
# Moedas e pontos de aulas
  r.var.z_moedas_ && t.addfim("Moedas:           " + txtnum(r.var.z_moedas_, "."))
  r.var.z_aulas_ && t.addfim("Aulas:            " + txtnum(r.var.z_aulas_, "."))
# Nível e experiência
  t1 = "Nível:            " + r.pnivel
  r.prenascer && (t1 += ", R" + r.prenascer)
  t.addfim(t1)
  se 1
    refvar nmax = r.pnivelmax
    t1 = nmax > 0 && r.pnivel >= nmax ? "" : "/" + r.expmax
    t.addfim("Experiência:      " + r.expatual + t1)
  fimse
# Batalha
  t1 = "Ataque/defesa:    " + int(r.atknorm * r.atktipo.0) + "/"
  se !r.deftipo.0
    t.addfim(t1 + "Imune")
  senao
    t.addfim(t1 + int(r.defnorm / r.deftipo.0))
  fimse
# t.addfim("Ataque/defesa:    " + r.atknorm + "/" + r.defnorm)
  t1 = "Atq/def especial: " + int(r.atkesp * r.atktipo.1) + "/"
  se !r.deftipo.1
    t.addfim(t1 + "Imune")
  senao
    t.addfim(t1 + int(r.defesp / r.deftipo.1))
  fimse
# t.addfim("Atq/def especial: " + r.atkesp + "/" + r.defesp)
  t.addfim("Precisão/evasão:  " + r.precisao + "/" + r.evasao)
  t.addfim("Velocidade:       " + r.pveloc)
# Mortes
  se r == r.contr
    t.addfim("Mortes:           " + r.mortes)
  senao
    t.addfim("Desmaios:         " + r.mortes)
  fimse
# Carregando
  t1 = txtnum((r.pesoden + r.pesoobj + r.pesovar) / 1000, "0")
  t.addfim("Peso total:       " + t1 + " Kg")
  t1 = "Carregando:       " + r.dentro1.total + "/" + r.objmax
  t1 += r.objmax == 1 ? " item" : " itens"
  t1 += ", " + txtnum((r.pesoden - r.pesoveste) / 1000, "0")
  t1 += "/" + txtnum(r.pesomax / 1000, "0") + " Kg"
  t.addfim(t1)
# Teeleentra e telesai
  r.var.z_teleentra && t.addfim("Teleentra:        " + r.var.z_teleentra)
  r.var.z_telesai && t.addfim("Telesai:          " + r.var.z_telesai)
# Mensagem para o usuário
  arg0.msg2(t.remove(1000))


classe cmd_infojog
herda comando_comum
const txtajuda = "\b\c3Infojog\b\n\
Sintaxe: INFOJOG <jogador>\n\
Mostra algumas informações de um personagem de jogador, mesmo que\n\
não esteja online."
const posic = 0
#
sav textovar var # Variáveis criadas sob demanda
sav txt20 nome # Nome do personagem
txt100 cnome # Para obter o nome codificado
sav int1 psexo
sav uint16 pnivel
sav uint16 prenascer
sav txt32 tipo1
sav txt32 tipo2
sav txt32 tipo3
sav int32 tempojogo1
sav uint16 tempojogo2

func escr
  ret !arg1, arg0.msg("Tecle o nome do personagem após INFOJOG")
# Obtém: p = objeto do personagem
  ref p # Objeto do personagem
  enquanto 1
    refvar nomesav = txts(txtnome(arg1))
    indiceitem item
    p = indice.obj("pn " + nomesav)
    sair p
    ret intnome(arg1), arg0.msg("Nome inválido para jogador: " + arg1)
    arqsav sav1
    listaobj l1
    p = este, l1.addfim(p)
    p.cnome = "x " + nomesav
    sair sav1.ler("sav1/" + nomesav + ".sav", l1, 1)
    ret arg0.msg("Jogador inexistente: " + arg1)
  efim
# Mostra os dados do personagem
  textotxt t
  txt100 lin
  lin = p.psexo ? "Jogador " : "Jogadora "
  t.addfim(lin + p.nome + (p.var.z_titulo ? ", " + p.var.z_titulo) + "\b")
  t.addfim("Nível:         " + (p.prenascer ? "R" + p.prenascer + " ") + p.pnivel)
  lin = ""
  p.tipo1 && (lin += ", " + txtcopiamai(p.tipo1, "A"))
  p.tipo2 && (lin += ", " + txtcopiamai(p.tipo2, "A"))
  p.tipo3 && (lin += ", " + txtcopiamai(p.tipo3, "A"))
  lin && t.addfim("Raça/classe:   " + txt2(lin))
  lin = "Tempo de jogo: "
  p.tempojogo2 == 1 && (lin += "1 dia ")
  p.tempojogo2 > 1 && (lin += txt(p.tempojogo2) + " dias ")
  refvar horas = intdiv((864000 - p.tempojogo1) / 36000)
  se horas < 1
    t.addfim(p.tempojogo2 < 1 ? lin + " menos de uma hora" : lin)
  senao horas == 1
    t.addfim(lin + " uma hora")
  senao horas == 2
    t.addfim(lin + " duas horas")
  senao
    t.addfim(lin + horas + " horas")
  fimse
  arg0.msg2(t.remove(1000))
