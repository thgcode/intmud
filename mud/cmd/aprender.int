classe cmd_aprender
herda comando_comum, comum_negociar
const txtajuda = "\b\c3Aprender\b\n\
Sintaxe: APRENDER <nome ou número do curso>\n\
Aprende um pouco sobre uma habilidade ou idioma.\n\
Para saber o que é ensinado em algum lugar, tecle AULAS."
#
const m_pontos1 = "Você precisa de um ponto de aula"
const m_pontos2 = "Você precisa de $m pontos de aula"

func escr
  ret !arg1, arg0.msg("Aprender o quê?")
  uint32 aulas # Quantas aulas ensina
  uint32 valor # Preço da aula
  int32 linha
  txt200 lin
  listaobj l
  nomeobj n
  l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    refvar p = ref(l.objini) # Personagem que está sendo verificado
    continuar !p.lojaaula(arg0)
    continuar negociar_checa(arg0, p)
    continuar evento(arg0, p)
    textotxt t2
    epara t2.addfim(p.lojaaula(arg0)), t2.linhas, t2.remove
      continuar !(lin = t2.ini.texto)
      lin = misc:nomevar(txt1(lin)), linha++
      continuar !n.nome(lin, 1) && txt(linha) != arg1
# Obtém variáveis
      refvar r = $[misc:objvar(t2.ini.texto)]
      valor = r.valor(arg0) * p.taxaaula / 100
      aulas = txt2(t2.ini.texto)
# Checa número de aulas
      txt100 nomevar = txt1(t2.ini.texto)
      int32 nivel = arg0.pnivel + config:nrenascer * txt2(arg0.var.[nomevar])
      se arg0.var.[nomevar]_ >= aulas
        lin = "Não tenho mais o que ensinar sobre " + lin + "."
        ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
      fimse
# Checa se está limitado a alguns tipos (raças/classes)
      se !r.tipoperso
      senao arg0.tipo1 && txtproclin(txte(r.tipoperso), txte(arg0.tipo1)) >= 0
      senao arg0.tipo2 && txtproclin(txte(r.tipoperso), txte(arg0.tipo2)) >= 0
      senao arg0.tipo3 && txtproclin(txte(r.tipoperso), txte(arg0.tipo3)) >= 0
      senao
        lin = "Não tem como ensinar " + lin + " para sua raça e classe."
        ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
      fimse
# Checa se possui o nível necessário
      se nivel < int(r.aulaini)
        lin = "Você não possui o nível necessário."
        ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
      senao nivel >= int(r.aulafim)
      senao
        nivel = intdiv(1 + (nivel - r.aulaini) * 7 / (r.aulafim - r.aulaini))
        se arg0.var.[nomevar]_ >= nivel
          lin = "Você não possui o nível necessário."
          ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
        fimse
      fimse
# Checa se conhece as habilidades necessárias
      t2.limpar
      epara t2.addfim(r.depende), t2.linhas, t2.remove
        continuar !t2.ini.texto
        continuar arg0.var.[t2.ini.texto]_ > arg0.var.[nomevar]_
        lin = misc:nomevar(txt1(t2.ini.texto))
        lin = "Você não conhece o suficiente sobre " + lin + "."
        ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
      efim
# Checa se personagem pode pagar
      se valor >= 0 && arg0.var.z_moedas_ < valor
        lin = "Você não tem $" + valor + " e eu não ensino " + lin + " de graça."
        ret arg0.msg(txtcopiamai(p.descnome, "A") + ": " + lin)
      fimse
# Checa pontos de aula
      se arg0.var.z_aulas_ < int(r.aulapontos)
        $mens.mens = int(r.aulapontos)
        ret $mens.mp($mens.mens == "1" ? m_pontos1 : m_pontos2, arg0)
      fimse
# Ensina
      arg0.var.z_aulas_ -= int(r.aulapontos)
      arg0.var.z_moedas_ -= valor
      lin = arg0.var.[nomevar]_ + 1
      txt2(arg0.var.[nomevar]) && (lin += " " + txt2(arg0.var.[nomevar]))
      arg0.var.[nomevar] = lin
      arg0.recalc = 1
      $mens.p(arg0, l.objini)
      $mens.mens = txt2(txte(nomevar))
      se valor
        $mens.mtodos1("$P entrega algumas moedas e $A dá uma aula de $m.")
      senao
        $mens.mtodos1("$A dá uma aula de $m para $p.")
      fimse
      ret
    efim
  efim
  arg0.msg("Ninguém ensina isso aqui.")

func evento # Gera evento para arg0 e arg1
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_aprender(arg0, arg1, arg0), 1
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret l.objini.cmd_aprender(arg0, arg1, arg1), 1
  efim
