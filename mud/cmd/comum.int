classe comando_comum
# Comandos para os jogadores
#
const posic = 8 # Posição mínima para usar o comando
#
const objcmd = este # Objeto que processa o comando, ou nulo se não existe
# arg0 = objeto do personagem
# arg1 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]
#
const objnivel = 0 # Prioridade do comando (0=maior prioridade)
# arg0 = objeto do personagem
# arg1 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]

func escr # Processa o comando
# arg0 = objeto do personagem
# arg1 = texto digitado após o nome do comando
# arg2 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]

func iniclasse
  ret txt(arg0, 0, 2) != "h_", !$[arg0] && criar(arg0)
  prog p
  ret p.existe(txt(arg0, 2)), nulo
  p.criar(txt(arg0, 2) + "\nconfig/cmd\nherda " + arg0)
  misccriar:add(txt(arg0, 2))


classe comando_menu_cmd
herda comando_menu
const titulo = txtcopiamai(txt(este, 6), "A")
const menufim = "menu_econfig_cmd"
const colunas = 28


classe cmd_lancar
herda comando_comum
const txtajuda = "\b\c3Lançar\b\nSintaxe: LANÇAR <nome da magia>\nLança uma magia."
const posic = 0
const lancamagia = 1 # Para indicar ao personagem que é comando de lançar magia
# Nota: a função escr aqui é desnecessária


classe comum_negociar
# Comandos em que o PNJ negocia com alguém: comprar, vender, avaliar, etc.

func negociar_msg # Checa se PNJ pode negociar e obtém o motivo
# arg0 = personagem do jogador
# arg1 = PNJ
# Retorna: "" se negocia, "\b" se apenas não negocia ou mensagem com o motivo
  ret arg0.atkenv || arg1.atkenv || !arg1.visivel(arg0), "\b"
  se !arg0.visivel(arg1)
    ret txtcopiamai(arg1.descnome, "A") + ": Não negocio com quem não posso ver."
  senao !arg1.lojanao # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo1)) >= 0
    ret txtcopiamai(arg1.descnome, "A") + ": Não negocio com " + arg0.tipo1
  senao arg0.tipo2 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo2)) >= 0
    ret txtcopiamai(arg1.descnome, "A") + ": Não negocio com " + arg0.tipo2
  senao arg0.tipo3 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo3)) >= 0
    ret txtcopiamai(arg1.descnome, "A") + ": Não negocio com " + arg0.tipo3
  fimse
  se !arg1.lojasim # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo1)) >= 0
  senao arg0.tipo2 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo2)) >= 0
  senao arg0.tipo3 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo3)) >= 0
  senao
    txt100 lin = arg0.tipo1 ? " " + arg0.tipo1
    lin += (arg0.tipo2 ? " " + arg0.tipo2 : "") + (arg0.tipo3 ? " " + arg0.tipo3)
    !lin && (lin = " você")
    ret txtcopiamai(arg1.descnome, "A") + ": Não negocio com" + lin
  fimse
  refvar abre = int(arg1.lojaini) - misc:hora
  refvar fecha = int(arg1.lojafim) - misc:hora
  se abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    $mens.p(arg1, arg0)
    ret $mens.txt(arg1.lojafechada, arg0)
  fimse
  ret ""

func negociar_checa # Checa se PNJ pode negociar
# arg0 = personagem do jogador
# arg1 = PNJ
# Retorna: "" se negocia ou "\b" se não negocia
  ret arg0.atkenv || arg1.atkenv || !arg1.visivel(arg0) || !arg0.visivel(arg1), "\b"
  se arg1.lojanao
    ret arg0.tipo1 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo1)) >= 0, "\b"
    ret arg0.tipo2 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo2)) >= 0, "\b"
    ret arg0.tipo3 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo3)) >= 0, "\b"
  fimse
  se !arg1.lojasim # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo1)) >= 0
  senao arg0.tipo2 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo2)) >= 0
  senao arg0.tipo3 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo3)) >= 0
  senao
    ret "\b"
  fimse
  refvar abre = int(arg1.lojaini) - misc:hora
  refvar fecha = int(arg1.lojafim) - misc:hora
  ret abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0, "\b"
  ret ""
