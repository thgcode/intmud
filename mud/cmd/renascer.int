classe cmd_renascer
herda comando_comum
const posic = 5
const objcmd = config:renascer ? este

func txtajuda
  ret !config:renascer, nulo
  se config:renascer < 2
    ret ajini
  senao config:nrenascer > 0
    ret ajini + aj[config:renascer] + aj_c + ajmenos + config:nrenascer + "."
  senao config:nrenascer < 0
    ret ajini + aj[config:renascer] + aj_c + ajmais + -config:nrenascer + "."
  senao
    ret ajini + aj[config:renascer] + aj_c
  fimse

const ajini = "\b\c3Renascer\b\n\
Sintaxe: RENASCER\n\
Assim que o seu personagem atingir o nível máximo, você poderá usar\n\
usar esse comando para renascer em outra raça e/ou classe.\n\
O nível máximo depende muito da raça e da classe."
const aj2 = "\n\
Você perde todas as habilidades e magias, mas poderá escolher qual\n\
não perderá nas próximas vezes que renascer."
const aj3 = aj_a + "duas" + aj_b
const aj4 = aj_a + "três" + aj_b
const aj5 = aj_a + "quatro" + aj_b
const aj6 = aj_a + "cinco" + aj_b
const aj_a = "\nVocê perde todas as habilidades e magias, mas poderá escolher "
const aj_b = " que\nnão perderá nas próximas vezes que renascer. Pode repetir."
const aj_c = "\n\
Nos comandos hab e magia, aparecerá R1, para indicar que foi escolhida\n\
uma vez, e renascer fará voltar ao nível iniciante. Na segunda vez, R2,\n\
e voltará para muito básico, e na terceira em diante, nível básico."
const ajmenos = "\n\
E também, cada vez que é escolhida, o nível para aprender diminui em "
const ajmais = "\nE também, cada vez que é escolhida, o nível para aprender aumenta em "

func escr
  refvar nmax = arg0.pnivelmax
  se nmax <= 0
    ret arg0.msg("Na raça e classe que você escolheu não tem como renascer.")
  senao arg0.pnivel < nmax
    ret arg0.msg("Você precisa chegar no nível " + nmax + " para renascer.")
  senao
    adiciona(arg0.var.z_tipo1, arg0.tipo1)
    adiciona(arg0.var.z_tipo2, arg0.tipo2)
    adiciona(arg0.var.z_tipo3, arg0.tipo3)
    arg0.sock.tpasso = "1"
    passo(arg0.sock, "")
  fimse

func adiciona # Adiciona o texto arg1 na variável arg0
  se !arg0
    arg0 = arg1
  senao arg1 && txtproclin(arg0, arg1) < 0
    arg0 += "\n" + arg1
  fimse

func passo
# Cancelar
  se arg1 == "Z"
    arg0.passo = ""
    arg0.var.limpar("j_")
    arg0.msg("Desistiu")
    ret 1
  fimse
# Chama passo1
  arg0.passo = este
  ret arg0.tpasso < 4 ? !passo1(arg0, arg1) : !passo4(arg0, arg1), 1
  enquanto arg0.tpasso < 4 ? passo1(arg0, "") : passo4(arg0, "")
  efim
  ret 1

func passo1 # Escolha da raça, classe e subclasse
# arg0 = objeto jogsock
# arg1 = o que digitou
  txt100 lin
  prog p
  textovar var # Contém os tipos que o jogador pode escolher
  textotxt t1 # Para acertar var
  textotxt t2 # Para acertar var
  refvar tpasso = arg0.tpasso
# Informações da raça
  se txt2(tpasso)
    se arg1 == "S"
      ret escolheu(arg0)
    senao arg1 == "N"
      tpasso = txt1(tpasso)
      ret 1
    senao
      lin = int(tpasso) == 1 ? "raça" : int(tpasso) == 2 ? "classe" : "subclasse"
      arg0.msg("Você quer essa " + lin + "? (tecle S ou N)")
      ret 0
    fimse
  fimse
# Tipos que todos podem escolher
  epara p.iniclasse("t_"), p.lin, p.depois
    tpasso == $[p.texto].menu && (var.[p.texto]_ = 1)
  efim
# Tipos que o jogador já completou
  epara t1.addfim(arg0.perso.var.z_tipo[tpasso]), t1, nulo
    refvar r = $t_[t1.remove(1)]
    var.[r]_ = 1
    epara t2.addfim(r.evoluir), t2, var.[$t_[t2.remove(1)]]_ = 1
    efim
  efim
# Obtém a lista de raças/classes/subclasses e checa se escolheu alguma
  arg0.txtmais.limpar
  epara nulo, var.ini, var.valorini("") = ""
    refvar r = $[var.ini]
    se !r.racas || tpasso < 2
    senao txtproclin(r.racas, arg0.var.j_tipo1) < 0
      continuar
    fimse
    continuar r.sexo && arg0.perso.psexo != r.sexo - 1
    se !r.classes || tpasso < 3
    senao txtproclin(r.classes, arg0.var.j_tipo2) < 0
      continuar
    fimse
    arg0.txtmais.addfim(txt(arg0.txtmais.linhas + 1) + ". " + r.nome)
    lin = var.ini
    continuar txt(arg1) != txt(arg0.txtmais.linhas)
    arg0.txtmais.limpar
    tpasso += " " + var.ini
    arg0.msg2(r.desc ? r.desc : r.nome)
    ret 1
  efim
# Uma ou nenhuma: escolhe automaticamente
  se arg0.txtmais.linhas <= 1
    arg0.txtmais.limpar
    tpasso += " " + lin
    ret escolheu(arg0)
# Mais de uma raça: apresenta o menu
  senao
    lin = int(tpasso) == 1 ? "raça" : int(tpasso) == 2 ? "classe" : "subclasse"
    se arg1
      arg0.txtmais.addini(txtmaimin(lin) + " inválida; escolha uma:")
    senao
      arg0.txtmais.addini("Escolha uma " + lin + " ou tecle Z para desistir")
    fimse
    arg0.txtmostra
    ret 0
  fimse

func escolheu # Jogador fez a escolha
# arg0 = objeto jogsock do jogador
# txt1(arg0.tpasso) = 1 se raça, 2 se classe, 3 se subclasse
# txt2(arg0.tpasso) = nome da classe t_ alguma coisa
# Retorna 1 se deve fazer mais uma escolha: se txt1(arg0.tpasso)<=3
  arg0.var.j_tipo[txt1(arg0.tpasso)] = txt(txt2(arg0.tpasso), 2)
  arg0.tpasso = int(arg0.tpasso) + 1
  ret 1

func passo4 # Escolha de uma habilidade ou magia
# arg0 = objeto jogsock
# arg1 = o que digitou
  ret config:renascer < 2, renascer(arg0)
  ret !arg0.perso.var.ini("h_") && !arg0.perso.var.ini("m_"), renascer(arg0)
  refvar tpasso = arg0.tpasso
# Pede a habilidade ou magia
  se txt2(tpasso) == ""
    refvar var = arg0.perso.var
    se arg1 == ""
      casovar txt1(tpasso)
      casose
        arg0.msg("Qual a habilidade ou magia você deseja manter após renascer? Z desiste")
        ret 0
      casose "5"
        arg0.msg("Qual a segunda habilidade ou magia? Z desiste")
        ret 0
      casose "6"
        arg0.msg("Qual a terceira habilidade ou magia? Z desiste")
        ret 0
      casose "7"
        arg0.msg("Qual a quarta habilidade ou magia? Z desiste")
        ret 0
      casose "8"
        arg0.msg("Qual a quinta habilidade ou magia? Z desiste")
        ret 0
      casofim
    senao var.h_[arg1]
      tpasso += " " + var.nomevar("h_" + arg1)
      arg0.msg("Você quer a habilidade " + txte(txt(tpasso, 4)) + "? (Tecle S ou N)")
    senao var.m_[arg1]
      tpasso += " " + var.nomevar("m_" + arg1)
      arg0.msg("Você quer a magia " + txte(txt(tpasso, 4)) + "? (Tecle S ou N)")
    senao
      txt100 t1
      nomeobj n
      n.ini(arg1)
      epara t1 = var.ini("h_"), t1, t1 = var.depois(t1, "h_")
        continuar !n.nome(txt(t1, 2))
        tpasso += " " + t1
        arg0.msg("Você quer a habilidade " + txt2(txte(t1)) + "? (Tecle S ou N)")
        ret 0
      efim
      epara t1 = var.ini("m_"), t1, t1 = var.depois(t1, "m_")
        continuar !n.nome(txt(t1, 2))
        tpasso += " " + t1
        arg0.msg("Você quer a magia " + txt2(txte(t1)) + "? (Tecle S ou N)")
        ret 0
      efim
      arg0.msg("Você não possui " + arg1 + ", escolha outra")
    fimse
    ret 0
# Confirma
  senao arg1 == "S"
    arg0.var.j_hab[txt1(tpasso)] = txt2(tpasso)
    arg0.tpasso = int(arg0.tpasso) + 1
    ret int(tpasso) < config:renascer + 3, 1
    refvar v = arg0.perso.var
    txt100 lin
    lin = arg0.var.j_hab4, v.[lin] = txt1(v.[lin]) + " " + (1 + txt2(v.[lin]))
    lin = arg0.var.j_hab5, v.[lin] = txt1(v.[lin]) + " " + (1 + txt2(v.[lin]))
    lin = arg0.var.j_hab6, v.[lin] = txt1(v.[lin]) + " " + (1 + txt2(v.[lin]))
    lin = arg0.var.j_hab7, v.[lin] = txt1(v.[lin]) + " " + (1 + txt2(v.[lin]))
    lin = arg0.var.j_hab8, v.[lin] = txt1(v.[lin]) + " " + (1 + txt2(v.[lin]))
    debug d
    d.ini
    epara lin = v.ini("h_"), txt(lin, 0, 2) == "h_", lin = v.depois(lin)
      refvar t = v.[lin]
      t = txt2(t) ? intmin("3", txt1(t), txt2(t)) + " " + txt2(t) : ""
    efim
    d.ini
    epara lin = v.ini("m_"), txt(lin, 0, 2) == "m_", lin = v.depois(lin)
      refvar t = v.[lin]
      t = txt2(t) ? intmin("3", txt1(t), txt2(t)) + " " + txt2(t) : ""
    efim
    d.ini
    ret renascer(arg0)
  senao arg1 == "N"
    tpasso = txt1(tpasso)
    ret 1
  senao txt(tpasso, 2, 1) == "h"
    arg0.msg("Você quer a habilidade " + txt(tpasso, 4) + "? (Tecle S ou N)")
  senao
    arg0.msg("Você quer a magia " + txt(tpasso, 4) + "? (Tecle S ou N)")
  fimse
  ret 0

func renascer
# arg0 = objeto jogsock
  arg0.passo = ""
  arg0.perso.tipo1 = arg0.var.j_tipo1
  arg0.perso.tipo2 = arg0.var.j_tipo2
  arg0.perso.tipo3 = arg0.var.j_tipo3
  arg0.perso.pnivel = intmax(t_[arg0.var.j_tipo1]:nmin, t_[arg0.var.j_tipo2]:nmin, t_[arg0.var.j_\
tipo3]:nmin)
  arg0.perso.expatual = 0
  arg0.perso.recalc = 1
  arg0.perso.prenascer++
  arg0.var.limpar("j_")
  arg0.msg("Você renasceu no nível " + arg0.perso.pnivel + ".")
  listaobj l
  epara l.addfim(arg0.perso.dentro2), l, l.ini.remove
    l.objini.item && l.objini.pnivel > arg0.perso.pnivel && l.objini.vestir(0)
  efim
  arg0.perso.recalc_exec
  arg0.perso.recalc = 0
  arg0.perso.pvida = arg0.perso.pvidamax
  arg0.perso.pmana = arg0.perso.pmanamax
  arg0.perso.pmove = arg0.perso.pmovemax
  ref sala = config:sala_renascer
  sala && arg0.perso.mudadono(sala)
  ret 0
