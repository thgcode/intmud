classe cmd_ver
herda comando_comum
const txtajuda = "\b\c3Ver\b\n\
Sintaxe: VER\n\
         VER <personagem ou objeto>\n\
Olha de relance para o lugar aonde você está ou para um personagem ou\n\
objeto. É semelhante ao comando olhar, mas dá menos informações."
const posic = 5
const completo = 0 # No comando olhar, essa variável é 1

func escr
  nomeobj n
  prog p
  ref r1
# Descrição da sala
  se !arg1
    refvar cfg = (completo ? 7 : 6) + (arg0.jogconfig.16 ? 8)
    arg0.msg2(arg0.dono.descsala(arg0, cfg))
    ret
  fimse
# Descrições extras da sala
  n.ini(arg1, 10000)
  r1 = arg0.dono
  se r1.visivel(arg0) && txtfim(arg1, 1) != "@"
    epara p.inifunctudo(r1, "ver_"), p.lin, p.depois
      casovar txtfim(p.texto, 2)
      casose "@d"
      casose "@D"
        continuar !misc:luz || !n.nome(txt(p.texto, 4, inttotal(p.texto) - 6))
        refvar m = txt(r1.[p.texto](arg0))
        ret m, arg0.msg2(m)
        continuar
      casose "@n"
      casose "@N"
        continuar misc:luz || !n.nome(txt(p.texto, 4, inttotal(p.texto) - 6))
        refvar m = txt(r1.[p.texto](arg0))
        ret m, arg0.msg2(m)
        continuar
      casose
        continuar !n.nome(txt(p.texto, 4))
        refvar m = txt(r1.[p.texto](arg0))
        ret m, arg0.msg2(m)
        continuar
      casofim
    efim
  fimse
# Descrições de itens e personagens
  textotxt t
  listaobj l
  l.addfim(r1.dentro1, r1.dentro2, arg0.dentro1)
  epara nulo, l, l.ini.remove
    continuar !l.objini.visivel(arg0) || !n.nome(l.objini.ident, l.objini.objtot)
# ret arg0 == l.objini, arg0.msg("Olhar para você mesm" + (arg0.msexo ? "o?" : "a?"))
    r1 = l.objini
# Gera eventos
    l.limpar
    se completo
      epara l.addfim(arg0.evento), l, l.ini.remove
        ret l.objini.cmd_olhar(arg0, r1, arg0), nulo
      efim
      epara l.addfim(r1.evento), l, l.ini.remove
        ret l.objini.cmd_olhar(arg0, r1, r1), nulo
      efim
    senao
      epara l.addfim(arg0.evento), l, l.ini.remove
        ret l.objini.cmd_ver(arg0, r1, arg0), nulo
      efim
      epara l.addfim(r1.evento), l, l.ini.remove
        ret l.objini.cmd_ver(arg0, r1, r1), nulo
      efim
    fimse
# Sala definida ao ver/olhar o item
    ref r2 = r1.i_salaver
    se r2
      r2.s_reset1
      refvar cfg = (completo ? 7 : 6) + (arg0.jogconfig.16 ? 8)
      arg0.msg2(r2.descsala(arg0, cfg))
      se completo && r1.dono != arg0
        $mens.p(arg0, nulo, r1)
        $mens.mvis2("", "$P olha para $o.")
      fimse
      ret
    fimse
# Sala para pegar e soltar itens
    r2 = r1.item ? r1.i_salapegar
    !r2 && (r2 = r1)
# O que o personagem está vestindo
    se r1.perso
      se completo
        int1 vest.32 # Aonde está vestindo
        ref pos.55
        listaitem item
        epara item = r1.dentro2.ini, item, item.depois
          vest.[item.obj.vestpos - 1] = 1, pos.[item.obj.vestpos] = item.obj
        efim
        txt512 lin
        txt100 nomepos
        epara lin = config:equip_ordem, lin, lin = txt2(lin)
          refvar obj = pos.[1 + txt1(lin)]
          continuar !obj.vestpos || !obj.visivel(arg0)
# continuar vest.bits & config:vestir[obj.vestpos - 1]
          nomepos = "\c2(" + misc:equip(obj.vestpos) + ")\b "
          nomepos += txtesp(20 - inttotal(nomepos))
          t.addfim(nomepos + txtcopiamai(obj.descnome, "A"))
        efim
        t.linhas && t.addini(txtcopiamai(r1.descnome, "A") + " está usando:")
      fimse
# O que o container possui
    senao r1.i_aberto == 5 # Indefinido
    senao r1.i_aberto >= 3 && !arg0.j_imortal # Fechado ou trancado
      t.addini(r1.msexo ? "Está fechado." : "Está fechada.")
    senao r1.i_aberto || r1 != r2 # Aberto
      se !r2.var.z_moedas
      senao r2.dono != arg0 || var.z_moedas_ <= 10
        t.addfim("1 " + txtcopiamai(misc:txtmoedas(r2.var.z_moedas), "A"))
      senao
        t.addfim("1 " + txtnum(r2.var.z_moedas_, ".") + " moedas")
      fimse
      listaitem item
      epara item = r2.dentro1.ini, item, item.depois
        continuar !item.obj.visivel(arg0)
        t.addfim(txt(item.obj.objtot) + " " + txtcopiamai(item.obj.descnome, "A"))
      efim
      se !t.linhas
        t.addfim(r1.msexo ? "Está vazio." : "Está vazia.")
      senao completo
        t.juntalin("(", "x)")
        t.addini("Dentro você vê:")
      senao
        t.limpar
      fimse
    fimse
# Nome, nível, situação atual e animal que escolheu
    txt200 t2
    se r1.perso
      t2 += niveltipo(r1, " é", ",") + " " + r1.estadopos
      se r1.persobat && r1.persobat != r1
        t2 += ".\b\nEscolheu " + txtcopiamai(r1.persobat.nome, "A")
        t2 += niveltipo(r1.persobat) + ", " + r1.persobat.estadopos
      fimse
    senao r1.pnivel || r1.renascer
      t2 += " é um objeto do nível " + r1.pnivel
      r1.renascer && (t2 += ", R" + r1.renascer)
    fimse
# Luz
    se int(r1.luztempo.abs) >= 25
      refvar tempo = int(r1.luztempo.abs / 50)
      r1.luztempo > 0 && (t2 += r1.msexo ? ", aceso" : ", acesa")
      t2 += ", produz luz por " + tempo + (tempo == 1 ? " minuto" : " minutos")
# t2 += r1.luztempo
    fimse
# Descrição ao olhar
    se !completo
      ret arg0.msg("\b" + txtcopiamai(r1.descnome, "A") + t2 + ".\b " + t.remove(1000))
    senao
      refvar m1 = !arg0.psexo && r1.var.z_mdesc ? r1.var.z_mdesc : r1.var.z_desc
      refvar m2 = r1.descver(arg0)
      se m1 || m2 # Com descrição extra
        t2 && t.addini(txtcopiamai(r1.descnome, "A") + t2 + ".")
        m1 && t.addini(m1)
        m2 && t.addini(m2)
        t.addini("\b\c6" + nomevolume(r1, r2) + "\b")
        arg0.msg2(t.remove(1000))
      senao # Sem descrição extra
        !t.linhas && t.addfim("Você não vê nada de especial.")
        arg0.msg2("\b\c6" + nomevolume(r1, r2) + t2 + ".\b\n" + t.remove(1000))
      fimse
    fimse
# Envia mensagem
    se r1 == arg0
    senao r1.perso
      $mens.p(arg0, r1)
      $mens.mvis2("", "$P olha para $a.")
    senao r1.dono != arg0
      $mens.p(arg0, nulo, r1)
      $mens.mvis2("", "$P olha para $o.")
    fimse
    ret
  efim
  arg0.msg("Você não vê isso.")

func niveltipo # Usado para informar nível, raça e classe do personagem
# arg0 = personagem
# arg1 = texto que deve ser colocado no começo da mensagem, se não for vazia
# arg2 = texto que deve ser colocado no final da mensagem, se não for vazia
  txt100 t
  arg0.jog ? (t = " jogador")
  se config:olhartipo
    arg0.tipo1 && (t += " " + txtcopiamai(txte(arg0.tipo1), "A"))
    arg0.tipo2 && (t += " " + txtcopiamai(txte(arg0.tipo2), "A"))
    arg0.tipo3 && (t += " " + txtcopiamai(txte(arg0.tipo3), "A"))
  fimse
  se config:olharnivel && (arg0.pnivel || arg0.prenascer)
    t += " nível " + arg0.pnivel
    arg0.prenascer && (t += " R" + arg0.prenascer)
  fimse
  ret t ? txt(arg1) + t + arg2 : ""

func nomevolume # Nome do item ou personagem e volume
# arg0 = item ou personagem
# arg1 = objeto que representa o conteúdo interno do item ou personagem
  ret !config:olharvolume, txtcopiamai(arg0.descnome, "A")
  txt100 nome
  nome = txtcopiamai(arg0.descnome, "A") + " (volume " + arg0.voltot / arg0.objtot
  se arg0.item && (arg0.i_aberto == 1 || arg0.i_aberto == 2) || arg1.s_sala
    ret nome + " dentro " + arg1.volden + "/" + arg1.volmax + ")"
  fimse
  ret nome + ")"


classe cmd_olhar
herda cmd_ver
const completo = 1
const txtajuda = "\b\c3Olhar\b\n\
Sintaxe: OLHAR\n\
         OLHAR <personagem ou objeto>\n\
Mostra a descrição completa do lugar aonde você está ou informações\n\
sobre um personagem ou um objeto."
